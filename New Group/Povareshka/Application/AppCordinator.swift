//
//  AppCordinator.swift
//  Povareshka
//
//  Created by user on 20.05.2025.
//

import UIKit

@MainActor
final class AppCoordinator {
    
    var window: UIWindow
    
    init(window: UIWindow) {
        self.window = window
        setupObservers()
    }
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    func start() {
        checkAuthState()
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ URL (Deep Links)
    func handleIncomingURL(_ url: URL) {
        print("üîó Handling URL:", url.absoluteString)

        Task {
            do {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Supabase
                try await SupabaseManager.shared.client.auth.session(from: url)
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                if isPasswordResetURL(url) {
                    await MainActor.run {
                        print("Password reset link processed")
                        showResetPasswordScreen()
                    }
                } else {
                    await MainActor.run {
                        print("Auth link processed")
                        showMainApp()
                    }
                }
            } catch {
                print("‚ùå Error Deep Link:", error)
            }
        }
    }
    
    
    private func checkAuthState() {
        Task {
            do {
                let session = try await SupabaseManager.shared.client.auth.session
                await MainActor.run {
                    print("‚úÖ Authorized user:", session.user.email ?? "No email")
                    showMainApp()
                }
            } catch {
                await MainActor.run {
                    print("‚ùå User is not authorized:", error.localizedDescription)
                    showAuthScreen()
                }
            }
        }
    }
    
    private func isPasswordResetURL(_ url: URL) -> Bool {
        url.absoluteString.contains("reset-password")
    }
}

@MainActor
extension AppCoordinator {
    
    private func showMainApp() {
        let tabBarVC = TabBarController()
        transitionToViewController(tabBarVC)
    }
    
    
    private func showAuthScreen() {
        let authVC = BaseAuthViewController()
        transitionToViewController(authVC)
    }

    private func showResetPasswordScreen() {
        // –°–æ–∑–¥–∞–µ–º BaseAuthViewController –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –Ω–µ–º —Ñ–æ—Ä–º—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        let baseAuthVC = BaseAuthViewController()
        baseAuthVC.showPasswordUpdateForm() // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        transitionToViewController(baseAuthVC)
    }
    
    private func transitionToViewController(_ viewController: UIViewController) {
        UIView.transition(
            with: window,
            duration: 0.3,
            options: .transitionCrossDissolve,
            animations: {
                self.window.rootViewController = viewController
            }
        )
    }
  
}

extension AppCoordinator {
    private func setupObservers() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(handleLogout),
            name: .userDidLogout,
            object: nil
        )
    }
    
    @objc private func handleLogout() {
        showAuthScreen()
    }
}
